{"version":3,"sources":["components/GoogleMapTrack/taxi.svg","components/GoogleMapTrack/MapMarker.jsx","components/GoogleMapTrack/GoogleMapTrack.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MapMarker","props","src","taxi","className","React","Component","GoogleMapTrack","miMap","map","maps","navigator","geolocation","getCurrentPosition","position","panTo","lat","lng","lon","this","style","height","width","alt","bootstrapURLKeys","key","defaultCenter","defaultZoom","onGoogleApiLoaded","renderMarkers","yesIWantToUseGoogleMapApiInternals","App","useState","location","setLocation","useEffect","ws","WebSocket","onopen","console","log","onmessage","msg","JSON","parse","data","myParam","URLSearchParams","window","search","get","fetch","then","res","json","err","catch","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,mQCc5BC,G,kBATb,WAAYC,GAAQ,qEACZA,I,sEAIN,OAAO,yBAAKC,IAAKC,IAAMC,UAAU,e,GANbC,IAAMC,YC2CfC,E,2MA1CbC,MAAQ,K,6EAEMC,EAAKC,GAAO,IAAD,OACnBC,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,SAAAC,GACvCL,EAAIM,MAAM,CAAEC,IAAK,EAAKf,MAAMe,IAAKC,IAAK,EAAKhB,MAAMiB,MACjD,EAAKV,MAAQC,O,2CAMbU,KAAKX,OACPW,KAAKX,MAAMO,MAAM,CAAEC,IAAKG,KAAKlB,MAAMe,IAAKC,IAAKE,KAAKlB,MAAMiB,Q,+BAIlD,IAAD,OACP,OAEE,yBACEE,MAAO,CACLC,OAAQ,QACRC,MAAO,OACPC,IAAK,sDAEPA,IAAI,cAEJ,kBAAC,IAAD,CACEC,iBAAkB,CAAEC,IAAK,2CACzBC,cAAe,CAAEV,IAAKG,KAAKlB,MAAMe,IAAKC,IAAKE,KAAKlB,MAAMiB,KACtDS,YAAa,GACbC,kBAAmB,gBAAGnB,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAR,OAAmB,EAAKmB,cAAcpB,EAAKC,IAC9DoB,oCAAoC,GAEpC,kBAAC,EAAD,CAAWd,IAAKG,KAAKlB,MAAMe,IAAKC,IAAKE,KAAKlB,MAAMiB,Y,GApC7BZ,a,MC8CdyB,MA9Cf,WAAgB,IAAD,EACmBC,mBAAS,CAAEhB,IAAK,EAAGE,IAAK,IAD3C,mBACNe,EADM,KACIC,EADJ,KAuCb,OA7BAC,qBAAU,WACR,IAAMC,EAAK,IAAIC,UAAU,sCAGzBD,EAAGE,OAAS,WACVC,QAAQC,IAAI,cACZJ,EAAGK,UAAY,SAAAC,GACbH,QAAQC,IAAIE,GACZR,EAAYS,KAAKC,MAAMF,EAAIG,SAI/B,IACMC,EADY,IAAIC,gBAAgBC,OAAOf,SAASgB,QAC5BC,IAAI,aAC9BX,QAAQC,IAAIM,GACZK,MAAM,sBAAwBL,GAC3BM,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAP,GACAA,EAAKU,IACPhB,QAAQC,IAAIK,GAEZX,EAAYW,MAGfW,OAAM,SAAAD,GAAG,OAAIhB,QAAQC,IAAIe,QAC3B,IAGD,6BACE,kBAAC,EAAD,CAAgBvC,IAAKiB,EAASjB,IAAKE,IAAKe,EAASf,QCjCnCuC,QACW,cAA7BT,OAAOf,SAASyB,UAEe,UAA7BV,OAAOf,SAASyB,UAEhBV,OAAOf,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBpD,WACrBA,UAAUqD,cAAcC,MAAMb,MAAK,SAAAc,GACjCA,EAAaC,kB","file":"static/js/main.4706fff2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/taxi.4ba539d0.svg\";","import React from \"react\";\r\nimport taxi from \"./taxi.svg\";\r\nimport \"./Marker.css\";\r\n\r\nclass MapMarker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return <img src={taxi} className=\"marker\" />;\r\n  }\r\n}\r\n\r\nexport default MapMarker;\r\n","import React, { Component } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport MapMarker from \"./MapMarker\";\r\n\r\nclass GoogleMapTrack extends Component {\r\n  miMap = null;\r\n\r\n  renderMarkers(map, maps) {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        map.panTo({ lat: this.props.lat, lng: this.props.lon });\r\n        this.miMap = map;\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.miMap) {\r\n      this.miMap.panTo({ lat: this.props.lat, lng: this.props.lon });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div\r\n        style={{\r\n          height: \"100vh\",\r\n          width: \"100%\",\r\n          alt: \"google map of that tracks the taxi driver location\"\r\n        }}\r\n        alt=\"lo que sea\"\r\n      >\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: \"AIzaSyBQGovuMsVwP-HAiTWrNAVND5JfnikoPZ8\" }}\r\n          defaultCenter={{ lat: this.props.lat, lng: this.props.lon }}\r\n          defaultZoom={17}\r\n          onGoogleApiLoaded={({ map, maps }) => this.renderMarkers(map, maps)}\r\n          yesIWantToUseGoogleMapApiInternals={true}\r\n        >\r\n          <MapMarker lat={this.props.lat} lng={this.props.lon} />\r\n        </GoogleMapReact>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleMapTrack;\r\n","import React, { useState, useEffect } from \"react\";\nimport GoogleMapTrack from \"./components/GoogleMapTrack/GoogleMapTrack\";\nimport \"./App.css\";\n\nfunction App() {\n  const [location, setLocation] = useState({ lat: 0, lon: 0 });\n\n  const renderPos = () => (\n    <div>\n      <h2>{location.lat}</h2>\n      <h2>{location.lon}</h2>\n    </div>\n  );\n\n  useEffect(() => {\n    const ws = new WebSocket(\"wss://wheres-my-taxi.herokuapp.com\");\n\n    //abre el socket\n    ws.onopen = () => {\n      console.log(\"open my ws\");\n      ws.onmessage = msg => {\n        console.log(msg);\n        setLocation(JSON.parse(msg.data));\n      };\n    };\n\n    const urlParams = new URLSearchParams(window.location.search);\n    const myParam = urlParams.get(\"conductor\");\n    console.log(myParam);\n    fetch(\"location?conductor=\" + myParam)\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        if (data.err) {\n          console.log(data);\n        } else {\n          setLocation(data);\n        }\n      })\n      .catch(err => console.log(err));\n  }, []);\n\n  return (\n    <div>\n      <GoogleMapTrack lat={location.lat} lon={location.lon} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}